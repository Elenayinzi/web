一：html
html是xtml语法的子集，并且进行了简化
Html5是在html上延续并且做了更多的优化和简化
1.声明方式：<!doctype html>
2.字符编码声明：<meta chartset="utf-8">
3.语言声明：<html lang="zh-CN">
4.大小写都可以：最好保持一致小写
5.增加布尔值，checkbox,radio中只要用checked即可，不用checked=checked
6.可以省略引号：最好使用双引号
7.可以省略结束符的标签
（1）不允许写结束符的标签
（2）可以省略结束符的标签
（3）可以完全省略的标签
8.新增标签：
(1)结构标签：
section内容区块
article内容区块的一个独立内容
aside是article内容相关的辅助信息
header内容区块的标题
hgroup页面标题组合
footer脚注，像作者名，地址，联系方式等
nav导航链接部分
figure一段独立的流内容
(2)表单标签:
email邮件
url地址
number数值
range范围值
DatePickers日期选择器：date,month,week,datetime,datetime-local,time
search搜索域
color
(3)媒体标签：
video视频标签，h4中用object
audio音频标签，h4中用object
embed嵌入各种媒体，h4中用object
(4)其他功能标签：
mark标准
progress进度条
time标注时间给搜素引擎搜索
ruby注释字
rt
wbr软换行
canvas绘图
command命令兼容性不好
details详情
datalist列表
keygen加密
output计算输出值
source
menu菜单
code
pre
删除标签:
(1)可以用css代替的标签basefont，big，center，font，s，strike，tt，u
(2)不再使用frame框架
(3)只有个别浏览器支持的标签：applet,bgsound,blink,marquee
(4)其他不常用的标签：rb,dir等
9.新增属性：
    表单属性：
    链接属性：media，对设备进行优化；hreflang,ref;
    其他属性：
    html标签中的mainfest定义离线应用文件；meta的charset;
    定义浏览器窗口小图标link ref="icon" href="" sizes属性现在可设置大小
    base中增加了target属性，<base href="http://localhost/">这个href作为源地址+超链接地址
    script标签增加:defer：页面加载后才执行内容;async：异步执行
    ol增加reversed倒序，start开始值
    menu的type类型
    style属性scoped定义样式有效范围
    iframe的seamless去掉边框，srcdoc定义内容，有它则src内容被覆盖；sandbox规定安全级别有四个值控制四个限制开关
删除属性：
    可以用css代替的属性：
    多余属性：
    其他属性：
10.全局属性:任何标签都可以使用的属性-data-type自定义属性；hidden隐藏标签；spellcheck语法纠错;
    tabindex控制tab的跳转顺序；contenteditable内容可编辑;script标签的designMode属性打开可以在网页
    实时编辑window.document.designMode = 'on';

二：css
1.css动画：transiotin,animation;-webkit-,-moz-,-o-
transition过渡属性:<过渡属性名称 过渡时间>，<过渡属性名称 过渡时间><过渡模式>
animation动画属性
transform变换属性：改变形状大小和位置；translate位置;rotate旋转;scale放大;skew扭曲;matrix矩阵;
animation-delay:动画执行时间，默认0；正值或者负值都可以
巧用border颜色
巧用border宽度
实现运动动画：正圆运动；椭圆运动；弧形运动；
css3hover效果：定位，颜色，动画，过渡
动画库csshake
css新东西：sass,less,stylus预处理器
css制作图标开源项目：one.div;fileicon.css
css书籍：css权威指南；精通css高级web标准解决方案；css secrets

三.js
1.学习js让网页有更多的交互
2.插入js使用script标签
3.引用外部js，script
4.js在页面的位置head,或者body
5.js语句：功能代码+分号(;);js注释：单行注释//,多行注释/**/
6.js变量，区分大小写，字母，下划线，美元符号开头，关键字不能做变量名，变量先声明再赋值；
变量是用于存储某种/某些数值的存储器;声明:var 变量名;
7.条件判断if...else...;函数：function hanshuming(){功能代码;}
8.常用互动的方法：
(1)输出内容：document.write('hello');
(2)警告消息框:alert('hello')
(3)消息对话框确认框:confirm('确定吗?')返回true/false
(4)消息对话框提问输入:prompt('请输入名字','myname')，返回myname/null
(5)打开新窗口:window.open();关闭窗口:window.close();
9.表达式:num = num + 1;
10.操作符:算数操作符(+,-,*,/.++,--),比较操作符(<,>,>=,<=,==,!=),逻辑操作符(&&,||,!),赋值符号=
优先级:算数>比较>逻辑>赋值,同级从左到右，改变优先级用括号()
11.数组:一个数组变量可以存放多个数据;索引从0开始;
定义数组:var arr = new Array();[unfined] var arr = new Array(8);长度为8
数组赋值:var arr = new Array(1,2,3); var arr = [1,2,3]; arr[0]=1;
向数组添加新元素：arr[5]=9;增加新索引；
使用数组：arr[index];
数组的长度:arr.length
二维数组:arr[][];arr[[],[]];
12.流程控制语句:if;if...else...;if...else if...else;switch(){case1:break;case2:break;default:}
for循环:for(初始化变量;循环条件;循环迭代){循环语句}
while循环:while循环重复执行一段代码，直到某个条件不再满足。while(条件){循环语句}
do...while: do{循环语句}while(条件)，循环体至少会执行一次;
使用break退出循环，循环结束;
continue：跳出本次循环，但是整个循环体还要继续执行下去;
函数:函数的作用，可以写一次代码，然后反复地重用这个代码
定义函数:function 函数名(参数1,参数2){函数体}
函数调用:函数定义好后，是不能自动执行的，需要调用它,直接在需要的位置写函数名
返回值的函数：return;
事件:鼠标事件:
onclick单击事件；onmouseover鼠标经过事件；onmouseout鼠标移开事件；
onchange文本框内容改变事件；onselect文本框内容选中事件；onfocus光标聚集；
onblur光标离开；
onload网页导入：事件会在页面加载完成后，立即发生，同时执行被调用的程序；
onunload关闭网页：当用户退出页面时（页面关闭、页面刷新等），触发onUnload事件；
javascript内置对象:
JavaScript 中的所有事物都是对象，如:字符串、数值、数组、函数等，每个对象带有属性和方法。
日期对象：Date;定义一个时间对象:var date = new Date();星期、月、日、年、时、分、秒、时区
内置的日期方法有:
get/setDate():返回或设置日期
get/setFullYear():返回或者设置四位数的年份
get/setYear():返回或设置年份
get/setMonth():返回或设置月份
get/setHours():返回或设置小时，24小时制
get/setMinutes():返回/设置分钟数
get/setSeconds():返回/设置秒钟数
get/setTime():返回/设置时间(毫秒为单位)一秒 = 1000 毫秒
getDay():返回星期0-6，0表示星期天

String字符串对象:定义字符串的方式是直接赋值:var str = "";
属性：length：长度
方法：
toUpperCase()小写转大写；toLowerCase()大写转小写；charAt(index)返回指定位置的字符；
返回指定的字符串首次出现的位置:str.indexOf(substr,startindex);没有指定的子字符串时返回-1;
字符串分割:str.split(分隔符);将字符串分割成数组返回数组；
提取字符串:str.substring(start,end);start必选，end可选；返回start-end-1的字符串，长度为end-start
提取指定数目的字符:str.substr(start,length);

Math对象:提供对数据的数学计算Math 对象是一个固有的对象，无需创建它，直接把Math作为对象使用就可以调用其所有属性和方法。
属性：Math.E,LN2,PI...
方法:Math.abs(x)绝对值;Math.max(x,y)最大值;min(x,y)最小值;
0-1随机数:Math.random();
向上取整数:Math.ceil(x);
向下取整:Math.floor(x);
四舍五入:Math.round(x);

Array数组对象:var arr = new Array();
属性：length长度
方法:
concat()连接多个数组返回新数组；arr1.concat(arr2,arr3);返回一个副本，可以用来深拷贝
join()将数组用指定分隔符转为字符串；
pop()删除并返回数组最后一个元素;
push()像数组末尾插入一个元素返回数组长度;
reverse()颠倒数组的顺序；
shift()删除并返回数组的第一个元素；
slice(start,end)从数组中返回选定的元素,返回一个子元素：
sort(函数)对数组进行排序
splice()删除元素像数组中添加新元素
toSource()返回该对象的源码
toString()数组转为字符串
toLocaleString()将数组转换为本地数组
unshift()像数组开头添加元素
valueOf()返回数组对象的原始值
split()字符串转数组

浏览器对象:
window对象：window对象是BOM的核心，window对象指当前的浏览器窗口
方法:alert();prompt();confirm();open();close();print();focus();blur();
moveBy();moveTo();resizeBy();resizeTo();scrollBy();scrollTo();setInterval();
setTimeout();clearInterval();clearTimeout();

JavaScript计时器：
一次性计时器：setTimeout(函数,1000);clearTimeout();
间隔性计时器: setInterval(函数,1000);clearInterval();

History对象:history对象记录了用户曾经浏览过的页面(URL)，并可以实现浏览器前进与后退相似导航的功能。
属性:length：历史浏览的URL数量
方法:back()前一个URL;forward()后一个URL;go()指定的页面URL;

Location：用于获取或设置窗体的URL，并且可以用于解析URL
属性:
href="http://wwww.imooc.com:8080/list.php?courseid=8#mediaid118"
protocol host hostname port pathname search hash
对象方法:assign()加载新文档;reload()重新加载当前文档;replace()用新文档替换当前文档;

Navigator对象：
属性:
appCodeName;appName浏览器名称;appVersion浏览器的平台和版本信息;
platform运行浏览器的操作系统平台;
userAgent返回客户机发送服务器的user-agent头部的值；返回用户代理头的字符串表示(就是包括浏览器版本信息等的字符串)

认识DOM:文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法
(1)元素节点:即标签
(2)文本节点:即标签中的文本图片等内容
(3)属性节点:即标签的属性
通过ID获取元素:getElementById('id'),结果为一个对象或者null;
获取/改变对象的值用object.innerHTML
改变dom对象的样式:object.style.propety = "";
object.style.display = none/block;控制元素的隐藏和显示
获取或者改变元素的类名,object.className;
节点属性:nodeName节点名称;nodeType节点类型;nodeValue给定节点的当前值;
遍历节点树:
childNodes所有子节点;firstChild返回第一个子节点;lastChild返回最后一个子节点;
parentNode返回父节点;nextSibling属性可返回某个节点之后紧跟的节点;previousSibling属性可返回某个节点之前紧跟的节点;
节点操作:createElement(el)创建新节点;createTextNode()创建一个包含文本的文本节点;
appenChild()往节点后添加节点;insertBefore()往节点前插入节点;removeChild()删除节点;如删除成功，此方法可返回被删除的节点，如失败，则返回 NULL
replaceChild()替换节点
常用方法:
getElementsByName()返回的是元素的数组
getElementsByTagName()返回带有指定标签名的节点对象的集合，返回元素的顺序是它们在文档中的顺序。
getElementById()根据id返回一个元素
getAttribute()通过元素节点的属性名称获取属性的值
setAttribute() 方法增加一个指定名称和值的新属性，或者把一个现有的属性设定为指定的值。

screen对象:对象用于获取用户的屏幕信息
availHeight:窗口可以使用的屏幕高度
availWidth:窗口可以使用的屏幕宽度
colorDepth:用户浏览器表示的颜色位数
pixelDepth:用户浏览器表示的颜色位数(IE不支持)
height:屏幕的高度
width：屏幕的宽度

浏览器窗口可视化区域大小:
获得浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）
对于IE9+、Chrome、Firefox、Opera 以及 Safari：
window.innerHeight - 浏览器窗口的内部高度
window.innerWidth - 浏览器窗口的内部宽度
对于 Internet Explorer 8、7、6、5：
document.documentElement.clientHeight/document.body.clientHeight表示HTML文档所在窗口的当前高度。
document.documentElement.clientWidth/document.body.clientWidth表示HTML文档所在窗口的当前宽度。
在不同浏览器都实用的 JavaScript 方案：
var w= document.documentElement.clientWidth
      || document.body.clientWidth;
var h= document.documentElement.clientHeight
      || document.body.clientHeight;

网页尺寸:
网页内容高度和宽度:
scrollHeight:小于或等于clientHeight
scrollWidth:小于或等于clientWidth
浏览器兼容性写法：
var w=document.documentElement.scrollWidth
   || document.body.scrollWidth;
var h=document.documentElement.scrollHeight
   || document.body.scrollHeight;

offsetHeight:clientHeight + 滚动条 + 边框
offsetWidth:clientWidth + 滚动条 + 边框
浏览器兼容性写法：
var w= document.documentElement.offsetWidth
    || document.body.offsetWidth;
var h= document.documentElement.offsetHeight
    || document.body.offsetHeight;

网页卷去的距离与偏移量：
scrollLeft:设置或获取位于给定对象左边界与窗口中目前可见内容的最左端之间的距离 ，即左边灰色的内容
scrollTop:设置或获取位于对象最顶端与窗口中可见内容的最顶端之间的距离 ，即上边灰色的内容
offsetLeft:获取指定对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置 
offsetTop:获取指定对象相对于版面或由 offsetParent 属性指定的父坐标的计算顶端位置 


四.Jquery：js库；引入在线不压缩版本https://code.jquery.com/jquery-3.4.1.js;通过jQuery方法包装后的对象，是一个类数组对象
（1）样式篇
jquery转换为DOM对象:
    利用数组下标的方式读取到jQuery中的DOM对象：$('div')[0]
    通过jQuery自带的get()方法：$('div').get(0);
DOM对象转换为jquery对象:
    $(DOM);
选择器:
1.id选择器$('#id');
2.类选择器$('.class');
3.全选择器$('*');
4.元素选择器$('div');
5.层级选择器:
$('div>p'):子选择器，直接子元素
$('div p'):后代选择器，所有后代，儿子，孙子，曾孙...
$('.prev + div'):相邻兄弟选择器，选择紧相邻的兄弟节点
$('.prev ~ div')：一般兄弟选择器,该元素之后的所有兄弟节点
6.基本筛选选择器：‘:’开头
$(':first')：匹配第一个元素
$(':last')：匹配最后一个元素
$(':not(selector)'):除去不匹配元素
$(':eq(index)'):指定索引的元素
$(':gt(index)'):大于给定索引的元素
$(':even'):选择索引微偶数的元素
$(':odd'):选择索引为奇数的元素
$(':lt(index)'):小于给定索引的元素
$(':header'):选择所有标题元素
$(':lang(language)'):选择指定语言的元素
$(':root'):选择该文档的根元素
$(':animated'):选择所有正在执行动画效果的元素
7.内容筛选选择器：
$(".div:contains(':contains')")：找到所有包含文本内容的元素
$(".div:has(span)")：找到包含指定元素的的元素
$("a:parent")：找到所有有子元素的元素
$("a:empty")：找到所有没有子元素的元素
8.可见性筛选选择器：
$(':visible'):选择所有显示的元素
$(':hidden'):选择所有隐藏的元素
9.属性筛选选择器：
$('div[name=p]')
10.元素筛选选择器：
$(":first-child"):第一个子元素
$(":last-child")：最后一个子元素
$(":only-child"):唯一子元素
$(":nth-child(n)"):第n个子元素
$(":nth-last-child(n)"):从最后一个元素开始的第n个元素
10.表单元素选择器:
$(':input')
$('input:text')
$('input:password')
$('input:radio')
$('input:checkbox')
$('input:submit')
$('input:image')
$('input:button')
$('input:file')
11.表单对象属性筛选选择器:
$('input:enabled')
$('input:disabled')
$('input:checked')
$('option:selected')
12.特殊选择器this:
this是JavaScript中的关键字，指的是当前的上下文对象，简单的说就是方法/属性的所有者
当然在JavaScript中this是动态的,也就是说这个上下文对象都是可以被动态改变的(可以通过call,apply等方法)
同样的在DOM中this就是指向了这个html元素对象，因为this就是DOM元素本身的一个引用
$(this)==把this对象加工成一个jquery对象
 jQuery的属性与样式：
 .attr(attribute):获取属性值；attr(属性名, 属性值)：设置属性的值
 .attr(属性名,函数值)：设置属性的函数值；ttr(attributes)：给指定元素设置多个属性值，即：{属性名一: “属性值一” , 属性名二: “属性值二” , … … }
 .removeAttr(attribute):删除属性
 .html() 不传入值，就是获取集合中第一个匹配元素的HTML内容
 .html(htmlString)  设置每一个匹配元素的html内容
 .html( function(index, oldhtml) ) 用来返回设置HTML内容的一个函数
 .text() 得到匹配元素集合中每个元素的合并文本，包括他们的后代
 .text( textString ) 用于设置匹配元素内容的文本
 .text( function(index, text) ) 用来返回设置文本内容的一个函数
.val():主要用于处理表单元素的值:input，select,textarea等
.val(value)
.val(function)
.addClass('newclass')：增加样式
.removeClass('class1 class2')：删除样式
.toggleClass():切换样式
.toggleClass( className )
.toggleClass( className, switch )
.toggleClass( [switch ] )
.toggleClass( function(index, class, switch) [, switch ] )
样式操作.css():
.css( propertyName ):获取属性值-.css("background-color")，.css(['width','height'])
.css(propertyName, value ):设置属性值-.css("background-color","red")
.css({'font-size':"15px","background-color" :"#40E0D0"})
元素的数据存储:
.data(el,key,value);
.removeData(el);

（2）DOM篇
创建：
DOM创建节点及节点属性：document.createElement--setAttribute--innerHTML--appendChild
jQuery节点创建与属性的处理:$("<div></div>")

插入：
内部插入,父子关系：
一个元素往后插入到另一个元素里面:append();appendTo();
一个元素从前插入到另一个元素里面:prepend();prependTo();
外部插入,兄弟关系:
after();before();被插入内容放在方法后面
insertBefore();insertAfter();被插入内容放在方法前面

删除:
empty();删除所有子节点,不包括元素本身
remove(params);有参可以过滤内容
remove();删除元素及元素里面的内容包括元素本身，绑定的事件会丢失
detach();删除节点，但是数据和事件不消失
复制和替换:
clone():深度复制，将所有匹配元素以及其里面的内容复制
clone(true):增加true参数，则会将数据和事件都复制
target.replaceWith(newContent):替换为新内容
newContent.replaceAll(target):用新内容替换
$('p').wrap('<div></div>'):用div包裹p元素
$('p').unwrap('<div></div>'):去掉p的父元素div
$('p').wrapAll('<div></div>'):给所有p元素增加一个div包裹
$('p').wrapAll(function() {  :每个p增加一个div包裹
    return '<div><div/>'; 
})
$('div').wrapInner('<p></p>')：给div内部的元素增加一个包裹元素

jQuery遍历:
children(param):查找合集里面的第一级子元素,仅儿子辈,参数可以是指定的选择器
find(选择器表达式必填):查找后代元素，管是儿子辈，孙子辈都可以
parent():查找父元素
parents(选择器表达式必填):查找到祖先节点
closest(选择器):从元素本身开始，在DOM 树上逐级向上级元素匹配，并返回最先匹配的祖先元素
next()：允许我们找遍元素集合中紧跟着这些元素的直接兄弟元素
prev():查找指定元素集合中每一个元素紧邻的前面同辈元素的元素集合
siblings():所有兄弟节点
add():往一个指定的集合中插入新的元素
each():$('li').each(function(index,el){})

（3）事件篇
鼠标事件:
click(func)单击事件;click('data',func),传递data数据
dbclick(func)双击事件
mousedown():鼠标按下事件
mouseup():鼠标弹起事件
mousemove():鼠标移动事件
mouseover():鼠标移入事件
mouseout():鼠标移出事件
mouseenter():鼠标移到元素内部
mouseleave():鼠标移到元素外部
hover(handlerIn,handlerOut)：鼠标悬浮事件
focusin():元素聚焦事件
focusout():
表单事件:
blur():元素本身失去焦点
focus():元素本身聚焦
change():改变值
select():选择事件
submit():表单提交事件
键盘事件:
keydown():按下键盘事件,每次获取的内容都是之前输入的，当前输入的获取不到
keyup():松开按键事件,每次获取的内容都是当前输入
keypress():只能捕获单个字符，不能捕获组合键,无法响应系统功能键,不区分小键盘和主键盘的数字字符
事件绑定和解绑:
$(el).on('click mouseover mouseout',function(){});
$("#elem").on({
    mouseover:function(){},  
    mouseout:function(){}
});
$("div").on("click","p",fn):事件绑定在最上层div元素上，当用户触发在a元素上，事件将往上冒泡，
一直会冒泡在div元素上。如果提供了第二参数，那么事件在往上冒泡的过程中遇到了选择器匹配的元素，
将会触发事件回调函数
$("elem").off("mousedown"):解绑事件

jQuery事件对象的作用：
1.兼容性更好
2.代码更简洁
3.event.target对象为当前触发的对象
jQuery事件对象的属性和方法：
event.type：获取事件的类型
event.pageX 和 event.pageY：获取鼠标当前相对于页面的坐标
event.preventDefault() 方法：阻止默认行为
event.stopPropagation() 方法：阻止事件冒泡
event.which：获取在鼠标单击时，单击的是鼠标的哪个键
event.currentTarget : 在事件冒泡过程中的当前DOM元素

自定义事件:
trigger():$('#elem').trigger('click');直接触发click事件或者自定义的事件
triggerHandler():和trigger一样，但可以阻止冒泡

（4）动画篇
隐藏与显示：
$('div').hide(fast/slow):隐藏元素
$('div').show(fast/slow):显示元素
toggle()自动切换隐藏和显示
上卷下拉：
slideDown(time,function(){}):下拉动画
slideUp(time,function(){}):上卷动画
slideToggle(time,function(){}):用滑动动画显示或隐藏一个匹配元素
淡入淡出：
fadeOut(time,function(){}):淡出动画
fadeIn(time,function(){}):淡入动画
fadeToggle(time,function(){}):淡入淡出动画切换
.fadeTo( duration, opacity ,callback):淡入效果,透明的不变
自定义动画:
.animate( properties ,[ duration ], [ easing ], [ complete ] )//执行动画
.animate( properties, options )
.stop( [clearQueue ], [ jumpToEnd ] ) //停止动画
.stop( [queue ], [ clearQueue ] ,[ jumpToEnd ] )
jquery核心：
each()方法: .$.each(object, function(index,value){})
inArray():  .$inArray( value, array ,[ fromIndex可选默认0] )返回值等于-1或大与-1
trim(): $.trim(el)去掉元素开始和结尾的空格换行符等
$(a).get(index):根据索引查找元素，可以是负值表示往前查找
$("li").index()：返回的是li在同辈元素中的排序序号

ES6入门:
环境准备:git，webpack,js
下载项目:构建工具项目：可以自动编译自动刷新浏览器
git clone https://github.com/cucygh/es6-webpack.git
npm i
npm i webpack -g
npm i webpack-dev-server -g
npm start
1.常量:const定义
2.作用域:用let代替var
es6之前立即执行函数:((fuction(){})())隔离作用域
es6:{}花括号定义一个块作用域
3.声明函数
es6之前:function test(){}; this指向被调用执行时的对象
es6箭头函数:() => {} this指向的是定义时的对象;()中放参数，参数只有一个的时候可以省略()；{}中放语句表达式，如果只有一句return则可以省略{}
4.默认参数:f(x, y = 7, z = 42)可以给参数默认值
可变参数：传递给函数的参数是可变的
扩展运算符:...params 用于数组中比如合并数组
5.对象代理:proxy保护原始数据
es6进阶指导：
解构赋值
模板字符串
正则扩展
class
Iterator
数字扩展
函数扩展
Module
set和map
对象扩展
generator
symbol

promise入门:
1.用于异步计算
2.将异步操作队列话，按照期望的顺序执行，返回符合期望的结果
3.对象之间可以传递操作promise对象，来帮助我们处理队列
js中存在大量的异步操作：
1.事件的监听和响应
2.回调：ajax回调；页面加载完后的回调；
node.js：无阻塞高并发，异步操作来实现，大量操作依赖回调；
回调的问题：嵌套层次深；无法正常使用return和throw;无法正常检索堆栈信息；多个回调之间难以建立连接;

css要做的练习:
1.css各种布局
2.css各种选择器
3.css各种定位
4.css动画
5.使用css3创建简单的3D场景：
prespective;perspective-origin:创建3D场景
transfrom;translate(位移),rotate(旋转)：场景变换

html5要做的练习:
dataset

js要做的练习:

jquery要做的练习:
toggleClass()没太懂
add()方法没太懂